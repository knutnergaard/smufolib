name: Continuous Integration

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ruff Lint Check
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          src: "./smufolib"

      - name: Ruff Format Check
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          src: "./smufolib"
          args: "format --check"

  mypy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4	

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  
          python -m pip install -r requirements-dev.txt

      - name: Run mypy
        run: mypy smufolib

  tests:
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', 3.13]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
          python -m pip install -e .

      - name: Run tests with coverage
        run: |
          coverage run --parallel-mode smufolib/test.py
          coverage report -m

      - name: Check if coverage files exist
        run: ls -la .coverage*

      - name: Generate coverage report
        run: |
          coverage combine  
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
